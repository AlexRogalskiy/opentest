package dtest.base.logging;

import dtest.base.contracts.ILogger;

public abstract class BaseLogger implements ILogger {

    private LogLevel level;

    BaseLogger() {
        this.level = LogLevel.INFO;
    }

    @Override
    public void debug(String text) {
        if (level.getValue() <= LogLevel.DEBUG.getValue()) {
            writeLogEntry(text, LogLevel.DEBUG);
        }
    }

    @Override
    public void error(String text) {
        if (level.getValue() <= LogLevel.ERROR.getValue()) {
            writeLogEntry(text, LogLevel.ERROR);
        }
    }

    public LogLevel getLevel() {
        return level;
    }

    protected String getPrefixForLevel(LogLevel level) {
        String prefix;

        switch (level) {
            case DEBUG:
                prefix = "DEBUG: ";
                break;
            case INFO:
                prefix = "";
                break;
            case ERROR:
                prefix = "ERROR: ";
                break;
            case WARN:
                prefix = "WARN: ";
                break;
            case TRACE:
                prefix = "TRACE: ";
                break;
            default:
                prefix = "";
        }

        return prefix;
    }

    @Override
    public void info(String text) {
        if (level.getValue() <= LogLevel.INFO.getValue()) {
            writeLogEntry(text, LogLevel.INFO);
        }
    }

    public void setLevel(LogLevel level) {
        this.level = level;
    }

    @Override
    public void trace(String text) {
        if (level.getValue() <= LogLevel.TRACE.getValue()) {
            writeLogEntry(text, LogLevel.TRACE);
        }
    }

    @Override
    public void warning(String text) {
        if (level.getValue() <= LogLevel.WARN.getValue()) {
            writeLogEntry(text, LogLevel.WARN);
        }
    }

    protected abstract void writeLogEntry(String text, LogLevel level);
}
