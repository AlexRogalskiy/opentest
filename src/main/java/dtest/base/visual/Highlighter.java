package dtest.base.visual;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.event.MouseListener;
import java.util.EventListener;

/**
 * Creates a highlighted region on the screen.
 */
public class Highlighter {

    Color color;

    Rectangle highlightRectangle;

    double opacity;

    Window window;

    public Highlighter(Rectangle highlightRectangle) {
        this.color = new Color(178, 0, 255, (int) (0.5 * 255));
        this.opacity = 0.5;
        this.highlightRectangle = highlightRectangle;
    }

    public Color getColor() {
        return this.color;
    }

    public double getOpacity() {
        return this.opacity;
    }

    public void hide() {
        this.window.dispose();
    }

    public void setColor(Color color) {
        this.color = new Color(
                color.getRed(),
                color.getGreen(),
                color.getBlue(),
                (int) (this.opacity * 255));
    }

    public void setOpacity(double opacity) {
        this.opacity = opacity;
        setColor(new Color(
                this.color.getRed(),
                this.color.getGreen(),
                this.color.getBlue(),
                (int) (opacity * 255)));
    }

    public void show(Integer waitTimeMs) {
        this.window = new Window(null) {
                    
            @Override
            public <T extends EventListener> T[] getListeners(Class<T> listenerType) {
                return super.getListeners(listenerType); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public synchronized MouseListener[] getMouseListeners() {
                return super.getMouseListeners(); //To change body of generated methods, choose Tools | Templates.
            }
            @Override
            public void paint(Graphics g) {
                this.setLocation(0, 0);
                this.setSize(
                        Highlighter.this.highlightRectangle.width,
                        Highlighter.this.highlightRectangle.height);
                g.setColor(Highlighter.this.color);
                g.fillRect(
                        Highlighter.this.highlightRectangle.x,
                        Highlighter.this.highlightRectangle.y,
                        Highlighter.this.highlightRectangle.width,
                        Highlighter.this.highlightRectangle.height);
//                    g.drawRect(
//                            Highlighter.this.highlightRectangle.x,
//                            Highlighter.this.highlightRectangle.y,
//                            Highlighter.this.highlightRectangle.width,
//                            Highlighter.this.highlightRectangle.height);
            }

            @Override
            public void update(Graphics g) {
                paint(g);
            }
        };

        this.window.setEnabled(false);
        this.window.setAlwaysOnTop(true);
        this.window.setBounds(this.window.getGraphicsConfiguration().getBounds());
        this.window.setBackground(new Color(0, true));
        this.window.setVisible(true);
        
        if (waitTimeMs != null) {
            try {
                Thread.sleep(waitTimeMs);
            } catch (InterruptedException ex) {
            }
            
            this.hide();
        }
    }
};
