package dtest.actions;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.search.AndTerm;
import javax.mail.search.ComparisonTerm;
import javax.mail.search.FromStringTerm;
import javax.mail.search.SearchTerm;
import javax.mail.search.SentDateTerm;
import javax.mail.search.SubjectTerm;

import dtest.base.TestAction;
import dtest.base.logging.Logger;

/**
 * An action that reads the content of an email message using the IMAP protocol.
 * The action outputs the content of the message in the "messageBody" output
 * value.
 */
public class ReadEmailImap extends TestAction {

	private static final String RECEIVED_AFTER_DATE_FORMAT = "MM-dd-yyyy HH:mm:ss";

	@Override
	public void run() {
		super.run();

		String imapServer = readStringArgument("server");
		String emailSubject = readStringArgument("subject");
		String fromAddress = readStringArgument("from", null);
		String sentAfter = readStringArgument("sentAfter");
		String userName = readStringArgument("userName");
		String password = readStringArgument("password");
		DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(RECEIVED_AFTER_DATE_FORMAT);
		LocalDateTime sentAfterDate = null;
		sentAfterDate = LocalDateTime.parse(sentAfter, dateTimeFormatter);
		this.writeOutput("messageBody",
				readEmail(imapServer, emailSubject, fromAddress, sentAfterDate, userName, password));
	}

	/**
	 * @Author rajaram.p
	 * 
	 *         This method takes parameters required to connect and retrieve the
	 *         required mail from mailbox and will return the latest email's
	 *         body as a response text.
	 * 
	 */
	private String readEmail(String imapServer, String emailSubject, String fromAddress, LocalDateTime sentAfter,
			String userName, String password) {
		String messageBody = null;
		List<Message> emails = new ArrayList<Message>();
		Properties properties = System.getProperties();
		Session session = Session.getDefaultInstance(properties);
		Store store = null;
		Folder inbox = null;
		Message[] messages = null;
		SearchTerm searchTerm = null;
		FromStringTerm fromTerm = null;
		SubjectTerm subjectTerm = null;
		SentDateTerm sentDateTerm = null;
		Date sentAfterDate = Date.from(sentAfter.atZone(ZoneId.systemDefault()).toInstant());
		try {
			store = session.getStore("imaps");
			store.connect(imapServer, userName, password);
			System.out.println(System.currentTimeMillis());
			inbox = store.getFolder("Inbox");
			inbox.open(Folder.READ_ONLY);
			subjectTerm = new SubjectTerm(emailSubject);
			// TODO:
			// http://stackoverflow.com/questions/32449454/searching-emails-from-gmail-is-not-working
			// GMAIL not supporting ReceivedDateTerm. also javax.mail is not
			// supporting sentTime, supporting only date. Below logic is to
			// fetch mails with one date earlier and then apply logic in
			// searched messages to filter by time.
			sentDateTerm = new SentDateTerm(ComparisonTerm.GT,
					Date.from(sentAfter.minusDays(1).atZone(ZoneId.systemDefault()).toInstant()));
			searchTerm = new AndTerm(subjectTerm, sentDateTerm);
			if (fromAddress != null) {
				fromTerm = new FromStringTerm(fromAddress);
				searchTerm = new AndTerm(searchTerm, fromTerm);
			}
			messages = inbox.search(searchTerm);
			if (messages.length == 0) {
				Logger.info("No messages found.");
			} else {
				// scenario with more than one mail will arise only in case of
				// incorrect sentDate value or duplicate mails in mailbox.
				emails = Arrays.asList(messages);
				Collections.reverse(emails);
				Iterator<Message> emailIterator = emails.iterator();
				Message message = emailIterator.next();
				if (message.getSentDate().after(sentAfterDate)) {
					messageBody = message.getContent().toString();
				} else {
					Logger.info("No messages found.");
				}
			}
		} catch (MessagingException | IOException e1) {
			throw new RuntimeException(
					String.format("Error occured while reading email from server: %s using username:%s and password:%s",
							imapServer, userName, password),
					e1);
		} finally {
			try {
				if (inbox != null) {
					inbox.close(true);
				}
				if (store != null) {
					store.close();
				}
			} catch (MessagingException e) {
				Logger.error(String.format("Exception occured while closing the store and folder. Message:%s",
						e.getMessage()));
			}
		}
		return messageBody;
	}
}
