package dtest.actions;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.HttpStatus;

import dtest.base.TestAction;
import dtest.base.http.ContentType;
import dtest.base.http.HttpResponse;
import dtest.base.http.HttpVerb;
import dtest.base.logging.Logger;

/**
 * An action that performs an HTTP request.
 */
public class HttpRequest extends TestAction {

	@Override
	public void run() {
		super.run();
		boolean statusCode = false;
		String url = readStringArgument("url");
		String httpVerb = readStringArgument("verb");
		Map<String, Object> headers = readMapArgument("headers", new HashMap<String, Object>());
		String body = readStringArgument("body", "");
		String contentType = readStringArgument("contentType", ContentType.TEXT_PLAIN.toString());
		Integer successStatusCode = readIntArgument("successStatusCode", HttpStatus.SC_OK);
		HttpResponse httpResponse = sendHttpRequest(url, httpVerb, headers, body, contentType);
		Logger.info(String.format("Received status:%s", httpResponse.getResponseStatusCode()));
		if (httpResponse.getResponseStatusCode().toString().equals(successStatusCode.toString())) {
			statusCode = true;
		}
		this.writeOutput("statusCode", statusCode);
		this.writeOutput("responseContent", httpResponse.getResponseContent());
	}

	/**
	 * @Author rajaram.p
	 * 
	 *         This method will take input parameters required to send the HTTP
	 *         request and return the HTTPResponse instance with response status
	 *         code and response content.
	 */
	private HttpResponse sendHttpRequest(String url, String httpVerb, Map<String, Object> headers, String body,
			String contentDataType) {
		HttpVerb verb = null;
		ContentType contentType = null;
		HttpResponse httpResponse = new HttpResponse();
		switch (httpVerb) {
		case "GET":
			verb = HttpVerb.GET;
			break;
		case "POST":
			verb = HttpVerb.POST;
			break;
		case "PUT":
			verb = HttpVerb.PUT;
			break;
		case "DELETE":
			verb = HttpVerb.DELETE;
			break;
		default:
			throw new RuntimeException(String.format("Invalid HTTP verb:%s", httpVerb));
		}

		switch (contentDataType) {
		case "APPLICATION_JSON":
			contentType = ContentType.APPLICATION_JSON;
			break;
		case "TEXT_PLAIN":
			contentType = ContentType.TEXT_PLAIN;
			break;
		default:
			throw new RuntimeException(String.format("Passed content type %s is not supported.", httpVerb));
		}
		dtest.base.http.HttpRequest httpRequest = new dtest.base.http.HttpRequest(url, verb);
		headers.forEach((headerName, headerValue) -> {
			// TODO: Below method needs to be implemented in
			// dtest.base.http.HTTPRequest
			httpRequest.setHeader(headerName, headerValue.toString());
		});

		httpRequest.setContent(body, contentType);
		try {
			httpRequest.execute();
			httpResponse.setResponseStatusCode(httpRequest.getResponseStatusCode());
			httpResponse.setResponseContent(httpRequest.getResponseAsString());
		} catch (IOException e) {
			throw new RuntimeException("Exception occured while sending HTTP request.", e);
		}
		return httpResponse;
	}
}
