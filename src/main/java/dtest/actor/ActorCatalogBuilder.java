package dtest.actor;

import dtest.base.testdef.TestDefActor;
import dtest.base.testdef.TestDefStep;
import dtest.base.testdef.TestDefinition;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Paths;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.io.FilenameUtils;
import org.yaml.snakeyaml.Yaml;

public class ActorCatalogBuilder {

    public static ActorCatalog buildCatalog(String rootDirPath) {
        ActorCatalog catalog = new ActorCatalog();
        catalog.tests = extractTestsFromFolder(Paths.get(rootDirPath, "tests").toString(), "");

        return catalog;
    }

    private static List<TestItemInfo> extractTestsFromFolder(String basePath, String relativePath) {
        List<TestItemInfo> catalog = new LinkedList<>();
        File[] files = new File(Paths.get(basePath, relativePath).toString()).listFiles();

        for (File file : files) {
            if (file.isDirectory()) {
                String newRelativePath = relativePath.equals("") ? file.getName() : relativePath + "/" + file.getName();
                List<TestItemInfo> childCatalog = extractTestsFromFolder(basePath, newRelativePath);
                catalog.addAll(childCatalog);
            } else if (FilenameUtils.getExtension(file.getName()).equalsIgnoreCase("yaml")) {
                try {
                    TestItemInfo info = new TestItemInfo();
                    info.path = relativePath;
                    info.name = FilenameUtils.getBaseName(file.getName());

                    MessageDigest md = MessageDigest.getInstance("SHA-1");
                    try (InputStream is = new FileInputStream(file);
                            DigestInputStream dis = new DigestInputStream(is, md)) {
                        Yaml yaml = new Yaml();
                        TestDefinition testDef = yaml.loadAs(dis, TestDefinition.class);
                        info.actors = new LinkedList<>();
                        info.steps = new HashSet<>();

                        for (TestDefActor actor : testDef.actors) {
                            info.actors.add(actor.actorType);

                            for (TestDefStep step : actor.steps) {
                                info.steps.add(step.index);
                            }
                        }
                    }
                    byte[] digest = md.digest();
                    info.hash = Hex.encodeHexString(digest);

                    catalog.add(info);
                } catch (Exception ex) {
                    System.out.println(String.format("Failed to generate catalog entry for test %s. %s",
                            file,
                            ex.getMessage()));
                }
            }
        }

        return catalog;
    }
}
