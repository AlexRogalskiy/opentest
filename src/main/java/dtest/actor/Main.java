package dtest.actor;

import dtest.base.TestActor;
import dtest.base.contracts.ITestActor;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.UIManager;

public class Main {

    private static ITestActor actor;

    private static JFrame mainwindow;

    private static JTextPane textPane;

    public static void main(String[] args) throws IOException {
        if (isUsingJavaw()) {
            showUi();
        }

        actor = new TestActor();
        if (mainwindow != null) {
            mainwindow.setTitle(actor.getType() + " test actor");
        }

        while (true) {
            try {
                Main.actor.runOneSession();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private static void showUi() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

        textPane = new JTextPane();

        KeyAdapter keyListener = new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.isControlDown()) {
                    if (e.getKeyCode() == KeyEvent.VK_EQUALS) {
                        Font f = new Font(Font.MONOSPACED, Font.PLAIN, textPane.getFont().getSize() + 2);
                        textPane.setFont(f);
                    } else if (e.getKeyCode() == KeyEvent.VK_MINUS) {
                        Font f = new Font(Font.MONOSPACED, Font.PLAIN, textPane.getFont().getSize() - 2);
                        textPane.setFont(f);
                    }
                }
            }
        };

        textPane.setBackground(Color.BLACK);
        textPane.setForeground(Color.WHITE);
        textPane.setMargin(new Insets(5, 8, 5, 8));
        textPane.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        Font f = new Font(Font.MONOSPACED, Font.PLAIN, 22);
        textPane.setFont(f);
        textPane.addKeyListener(keyListener);

        JScrollPane scrollPane = new JScrollPane(textPane);
        scrollPane.setViewportBorder(null);
        scrollPane.setSize(400, 200);

        mainwindow = new JFrame();
//        mainwindow.setIconImage(Toolkit.getDefaultToolkit().getImage(Main.class.getResource(Filepath)));
//        mainwindow.setBackground(Color.BLACK);
        mainwindow.setSize(new Dimension(1500, 900));
        mainwindow.setLocationRelativeTo(null);
        mainwindow.setVisible(true);
        mainwindow.setLayout(new BorderLayout());
        mainwindow.add(scrollPane, BorderLayout.CENTER);
        mainwindow.addKeyListener(keyListener);
        mainwindow.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                System.exit(0);
            }
        });

        ConsolePane console = new ConsolePane(textPane);
        console.redirectOut();
        console.redirectErr(new Color(245, 10, 10), null);
        console.setMessageLines(2000);
    }

    /**
     * Returns true if the application was started using javaw.exe or false
     * otherwise.
     */
    private static boolean isUsingJavaw() {
        try {
            System.in.available();
            return false;
        } catch (Exception ex) {
            return true;
        }
    }
}
