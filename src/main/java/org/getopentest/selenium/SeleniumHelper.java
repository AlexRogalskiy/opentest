package org.getopentest.selenium;

import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.getopentest.logging.Logger;
import org.getopentest.util.Config;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.safari.SafariDriver;

public class SeleniumHelper {

    private static WebDriver driver;

    private static Config config;

    static {
        config = Config.load("actor.yaml");
    }

    private static WebDriver createDriver() {
        WebDriver webDriver = null;
        DesiredCapabilities caps;
        String browserName = config.getString("selenium.desiredCapabilities.browserName").toLowerCase();

        setSystemProperties();

        switch (browserName) {
            case "chrome":
                caps = DesiredCapabilities.chrome();
                injectCapsFromConfig(caps);
                ChromeOptions chromeOptions = new ChromeOptions();
                chromeOptions.merge(caps);
                webDriver = new ChromeDriver(chromeOptions);
                break;
            case "edge":
                caps = DesiredCapabilities.edge();
                injectCapsFromConfig(caps);
                webDriver = new EdgeDriver(caps);
                break;
            case "firefox":
                caps = DesiredCapabilities.firefox();
                injectCapsFromConfig(caps);
                FirefoxOptions firefoxOptions = new FirefoxOptions();
                firefoxOptions.merge(caps);
                webDriver = new FirefoxDriver(firefoxOptions);
                break;
            case "internet explorer":
                caps = DesiredCapabilities.internetExplorer();
                // Avoid the browser zoom level error
                caps.setCapability("ignoreZoomSetting", true);
                injectCapsFromConfig(caps);
                InternetExplorerOptions ieOptions = new InternetExplorerOptions();
                ieOptions.merge(caps);
                webDriver = new InternetExplorerDriver(ieOptions);
                break;
            case "safari":
                caps = DesiredCapabilities.safari();
                injectCapsFromConfig(caps);
                webDriver = new SafariDriver();
                break;
            default:
                throw new RuntimeException(String.format(
                        "The \"selenium.browserName\" config property specifies a browser "
                        + "that is invalid or not supported. The property value was \"%s\". "
                        + "The valid values are: \"chrome\", \"edge\", \"firefox\", \"internet "
                        + "explorer\" and \"safari\".",
                        browserName));
        }

        Integer scriptTimeout = Integer.valueOf(config.getString("selenium.scriptTimeout", "20"));
        webDriver.manage().timeouts().setScriptTimeout(scriptTimeout, TimeUnit.SECONDS);
        webDriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
        Boolean maximizeWindow = config.getString("selenium.maximizeWindow").equalsIgnoreCase("true");
        if (maximizeWindow) {
            webDriver.manage().window().maximize();
        }

        return webDriver;
    }

    public static Config getConfig() {
        return config;
    }

    public static WebDriver getDriver() {
        if (driver == null) {
            driver = createDriver();
        }

        return driver;
    }

    /**
     * Inject desired capabilities from configuration into the specified
     * DesiredCapabilities object.
     */
    private static void injectCapsFromConfig(DesiredCapabilities caps) {
        Object capsFromConfig = config.get("selenium.desiredCapabilities");

        if (capsFromConfig instanceof Map) {
            Map<String, Object> capsFromConfigMap = (Map) capsFromConfig;
            for (Map.Entry entry : capsFromConfigMap.entrySet()) {
                if (entry.getValue() != null) {
                    caps.setCapability(entry.getKey().toString(), entry.getValue());
                }
            }
        }
    }

    /**
     * Calls driver.quit() and sets the driver instance to null.
     */
    public static void discardDriver() {
        if (driver != null) {
            try {
                driver.quit();
            } catch (Exception ex) {
                Logger.warning("Failed to quit the Selenium driver", ex);
            }

            driver = null;
        }
    }

    /**
     * Set the system properties as specified in configuration property
     * "selenium.systemProperties".
     */
    private static void setSystemProperties() {
        Object systemProperties = config.get("selenium.systemProperties");

        if (systemProperties instanceof Map) {
            Map<String, Object> propsAsMap = (Map) systemProperties;
            for (Map.Entry entry : propsAsMap.entrySet()) {
                if (entry.getValue() != null) {
                    System.setProperty(entry.getKey().toString(), entry.getValue().toString());
                }
            }
        }
    }

    /**
     * Check the connection with the driver and perform a simple operation to
     * ensure it works properly. Discard the driver instance and create a new
     * one, if necessary.
     */
    public static void verifyDriverIsValid() {
        int retriesLeft = 3;

        while (retriesLeft > 0) {
            retriesLeft--;

            try {
                if (driver == null) {
                    driver = createDriver();
                }
                // Just an operation that requires communication with the driver
                driver.manage().window().getSize();
                break;
            } catch (Throwable ex) {
                discardDriver();

                Logger.info(String.format("Caught exception %s while initializing the Selenium driver. The exception message was: \"%s\". Retries left: %s.",
                        ex.getClass().getName(),
                        ex.getMessage(),
                        retriesLeft));
            }
        }
    }
}
