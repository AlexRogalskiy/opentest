package org.getopentest.util;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.image.BufferedImage;
import jdk.nashorn.api.scripting.ScriptObjectMirror;
import org.getopentest.contracts.IImageFinder;
import org.getopentest.serialization.json.BufferedImageSerializer;
import org.getopentest.serialization.json.DuplicateFieldExclusionStrategy;
import org.getopentest.serialization.json.ScriptObjectMirrorSerializer;
import org.getopentest.serialization.yaml.SkipNullRepresenter;
import org.getopentest.testdef.TestDefAction;
import org.getopentest.visual.ImageFinder;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.nodes.Tag;

public class Factory {

    public static IImageFinder getImageFinder() {
        return new ImageFinder();
    }

    public static Gson getGson() {
        return Factory.getGsonBuilder().create();
    }

    public static GsonBuilder getGsonBuilder() {
        GsonBuilder builder = new GsonBuilder()
                .disableHtmlEscaping()
                .registerTypeAdapter(BufferedImage.class, new BufferedImageSerializer())
                .registerTypeAdapter(ScriptObjectMirror.class, new ScriptObjectMirrorSerializer())
                .addDeserializationExclusionStrategy(new DuplicateFieldExclusionStrategy())
                .addSerializationExclusionStrategy(new DuplicateFieldExclusionStrategy());
        return builder;
    }

    public static Yaml getYaml() {
        final DumperOptions options = new DumperOptions();
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.FLOW);
        options.setPrettyFlow(true);

        SkipNullRepresenter representer = new SkipNullRepresenter();
        representer.addClassTag(TestDefAction.class, Tag.MAP);

        return new Yaml(representer, options);
    }

    public static TesseractOcr getTesseractOcr() {
        return new TesseractOcr();
    }
}
