package com.mcdonalds.dtest.actor;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;

import com.mcdonalds.dtest.annotations.Inject;


/**
 * Dependency injection utility class
 */
public class Injector {
	/**
	 * Injects a value into one of an existing object's fields. The field to inject
	 * into is determined by looking at two criteria: it is annotated with the @Inject
	 * annotation; is the same type or a superclass of the value being injected.
	 *  
	 * @param targetObject The target object to inject into
	 * @param value The value to inject into the target object 
	 * @throws IllegalAccessException
	 */
	public static void inject(Object targetObject, Object value) throws IllegalAccessException {
		Collection<Field> collection = new ArrayList<Field>();
        Field[] testClassFields = targetObject.getClass().getDeclaredFields();
        collection.addAll(Arrays.asList(testClassFields));
        
        Class<?> superclass = targetObject.getClass().getSuperclass();
        if (superclass != null) {
        	Field[] superClassFields = superclass.getDeclaredFields();
        	collection.addAll(Arrays.asList(superClassFields));
        }
        for (Field field : collection) {
            Annotation annot = field.getAnnotation(Inject.class);
            
            if (annot != null && field.getType().isInstance(value)) {
                boolean isAccessible = field.isAccessible();
                field.setAccessible(true);
                field.set(targetObject, value);
                field.setAccessible(isAccessible);
            }
        }

    }
}
