package com.mcdonalds.dtest.actor;

import com.mcdonalds.dtest.contracts.ITestActor;
import java.io.IOException;
import java.time.Duration;
import java.util.*;

import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import com.google.gson.*;
import com.mcdonalds.dtest.actor.http.ContentType;
import com.mcdonalds.dtest.actor.http.HttpRequest;
import com.mcdonalds.dtest.actor.http.HttpVerb;

/**
 * TestActor
 */
public class TestActor implements ITestActor {
	/** The string identifier of the actor */
	private String actorId;
	
	/** Identifies the type of actor (GMA, NP6, etc.) */
	private String actorType;
	
	private Thread announceThread;
	
	private Boolean cancelWork;
	
	private CloseableHttpClient httpClient;
	
	private String syncServiceBaseUrl;
	
	/**
	 * The string identifier of the current test session, if any. If not
	 * null, it means that this test actor was acquired by the sync service
	 * and allocated to a particular test session */
	private String testSessionId;
	
	public TestActor(String syncServiceBaseUrl, String actorType) {
		this.syncServiceBaseUrl = syncServiceBaseUrl;
		this.actorType = actorType;
		
		this.actorId = UUID.randomUUID().toString();
		this.cancelWork = false;
		this.httpClient = HttpClients.createDefault();
	}
	
	
	/**
	 * Announces the actor to the orchestrator service, so it can be used for
	 * running a test session
	 */
	private void announce() {
		try {
			HttpRequest request = new HttpRequest(syncServiceBaseUrl + "/api/actor/announce", HttpVerb.POST);
			request.setContent(String.format("{\"actorId\":\"%s\",\"actorType\":\"%s\"}", actorId, actorType), ContentType.APPLICATION_JSON);
			request.execute();
			
			String response = request.getResponseAsString();
			JsonElement jelement = new JsonParser().parse(response);
			JsonElement testSessionIdElem = jelement.getAsJsonObject().get("testSessionId");
		    
		    if (!testSessionIdElem.isJsonNull()) {
		    	testSessionId = testSessionIdElem.getAsString();
		    } else {
		    	//TODO: Abandon the current test session, whatever that means
		    }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Announces the actor to the sync service and does the work for only one
	 * test session, then returns
	 */
	public void runOneSession(Duration maxWaitTime) {
		startAnnounceThread();
		
		// Wait to be assigned a test session ID to work with
		
		// Start querying the session status and executing the tests
	}
	
	public void runOneSession() {
		runOneSession(Duration.ofMinutes(5));
	}
	
	private void startAnnounceThread() {
		announceThread = new Thread() {
		    public void run() {
		        try {
		        	while (!cancelWork) {
			        	announce();
			            Thread.sleep(5000);
		        	}
		        } catch(InterruptedException v) {
		            System.out.println(v);
		        }
		    }  
		};

		announceThread.start();
	}
}
