package com.mcdonalds.dtest.actor;

import com.mcdonalds.dtest.contracts.ITestActor;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.security.CodeSource;
import java.time.Duration;
import java.util.*;

import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import com.google.gson.*;
import com.mcdonalds.dtest.actor.http.ContentType;
import com.mcdonalds.dtest.actor.http.HttpRequest;
import com.mcdonalds.dtest.actor.http.HttpVerb;
import com.mcdonalds.dtest.actor.SessionStatusResponse;

/**
 * TestActor
 */
public class TestActor implements ITestActor {
	/** The string identifier of the actor */
	private String actorId;
	
	/** Identifies the type of actor (GMA, NP6, etc.) */
	private String actorType;
	
	private Thread announceThread;
	
	private Boolean actorIsStopping;
	
	private int currentStepIndex;
	
	private Object currentTest;
	
	private int currentTestIndex;
	
	private CloseableHttpClient httpClient;

	private Boolean sessionIsCompleted;
	
	private String syncServiceBaseUrl;
	
	/**
	 * The string identifier of the current test session, if any. If not
	 * null, it means that this test actor was acquired by the sync service
	 * and allocated to a particular test session */
	private String testSessionId;
	
	public TestActor() throws URISyntaxException, IOException, ClassNotFoundException {		
		Properties config = getConfiguration();
		this.syncServiceBaseUrl = config.getProperty("syncServiceBaseUrl");
		this.actorType = config.getProperty("actorType");
		
		this.actorId = UUID.randomUUID().toString();
		this.actorIsStopping = false;
		this.currentStepIndex = -1;
		this.currentTestIndex = -1;
		this.httpClient = HttpClients.createDefault();
		this.sessionIsCompleted = false;
		
		startAnnounceThread();
	}
	
	/**
	 * Announces the actor to the sync service, so it can be used for
	 * running a test session
	 */
	private void announce() {
		try {
			HttpRequest request = new HttpRequest(syncServiceBaseUrl + "/api/actor/announce", HttpVerb.POST);
			request.setContent(String.format("{\"actorId\":\"%s\",\"actorType\":\"%s\"}", actorId, actorType), ContentType.APPLICATION_JSON);
			request.execute();
			
			String response = request.getResponseAsString();
			JsonElement jelement = new JsonParser().parse(response);
			JsonElement testSessionIdElem = jelement.getAsJsonObject().get("testSessionId");
		    
		    if (!testSessionIdElem.isJsonNull()) {
		    	testSessionId = testSessionIdElem.getAsString();
		    }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	private Properties getConfiguration() throws IOException, URISyntaxException, ClassNotFoundException {
		// Identify the main class that started the application. The location of the
		// JAR file containing the main class is where we'll look for the config file
		StackTraceElement[] elements = new Exception().getStackTrace();
	    Class<?> mainClass = Class.forName(elements[elements.length - 1].getClassName());
	    
		CodeSource codeSource = mainClass.getProtectionDomain().getCodeSource();
		File jarFile = new File(codeSource.getLocation().toURI().getPath());
		File jarDir = jarFile.getParentFile();

		if (jarDir != null && jarDir.isDirectory()) {
			// If we're running the code in the IDE, it will not be packaged as JAR
			// and the CLASS files will reside in the "test-classes" directory. However,
			// the config file is found one directory up the path
			if (jarDir.getName() == "test-classes") {
				jarDir = jarDir.getParentFile();
			}
			
			File propFile = new File(jarDir, "TestActor.properties");
			InputStream fileInputStream = new FileInputStream(propFile);
			Properties prop = new Properties();
			prop.load(fileInputStream);
			return prop;
		} else {
			throw new FileNotFoundException();
		}
	}
	
	private SessionStatusResponse getTestSessionStatus() {
		try {
			SessionStatusResponse sessionStatus = new SessionStatusResponse();
			
			HttpRequest request = new HttpRequest(
					String.format("%s/api/session/%s/status",
						syncServiceBaseUrl,
						testSessionId),
					HttpVerb.GET);
			request.execute();
			
			String responseString = request.getResponseAsString();
			JsonElement responseElement = new JsonParser().parse(responseString);
			JsonObject responseObj = responseElement.getAsJsonObject();
			sessionStatus.currentStepIndex = responseObj.get("currentStepIndex").getAsInt();
			sessionStatus.currentTestGroup = responseObj.get("currentTestGroup").getAsString();
			sessionStatus.currentTestIndex = responseObj.get("currentTestIndex").getAsInt();
			sessionStatus.currentTestName = responseObj.get("currentTestName").getAsString();
			sessionStatus.status = responseObj.get("status").getAsString();
			
			return sessionStatus;
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	/**
	 * Announces the actor to the sync service and does the work for only one
	 * test session, then returns
	 */
	public void runOneSession(Duration maxWaitTime) {
		testSessionId = null;
		
		// Wait until this actor is acquired by a test session
		while (testSessionId == null) {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		// Start querying the session status and executing the tests
		while (!sessionIsCompleted) {
			SessionStatusResponse sessionStatus = getTestSessionStatus();
			
			if (sessionStatus.status == "started") {
				if (currentTestIndex <= sessionStatus.currentTestIndex) {
					if (currentStepIndex <= sessionStatus.currentStepIndex) {
						// Identify test class and create test object instance
						
						// Identify test step method
						
						// Execute test step method on test object
					}
				}
			} else if (sessionStatus.status == "completed") {
				sessionIsCompleted = true;
			}
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {}
		}
		
		testSessionId = null;
		
		stop();
	}
	
	public void runOneSession() {
		runOneSession(Duration.ofMinutes(5));
	}
	
	private void startAnnounceThread() {
		announceThread = new Thread() {
		    public void run() {
		        try {
		        	while (!actorIsStopping) {
			        	announce();
			            Thread.sleep(5000);
		        	}
		        } catch(InterruptedException e) {
		        	e.printStackTrace();
		        }
		    }  
		};

		announceThread.start();
	}

	private void stop() {
		actorIsStopping = true;
	}
}
