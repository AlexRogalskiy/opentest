#!/usr/bin/env node
const chalk = require('chalk');
const spawn = require('child_process').spawn;
const fs = require('fs');
const path = require('path');
const inquirer = require('inquirer');
const shelljs = require('shelljs');
const vm = require('vm');
const yargs = require('yargs');

const currentDir = process.cwd();

yargs
    // Server commands
    .command('server', 'OpenTest server commands', function (yargs) {
        // server init
        yargs.command(
            'init [workdir]',
            'Initializes the OpenTest server working directory',
            function (yargs) {
                yargs.positional('workdir', {
                    describe: 'The server\'s working directory',
                    type: 'string'
                });
            },
            function (argv) { initServer(argv) });
        // server start
        yargs.command(
            '* [workdir]',
            'Starts OpenTest server in the current directory, or in the directory specified',
            function (yargs) {
                yargs.positional('workdir', {
                    describe: 'The working directory to start the server in',
                    type: 'string'
                });
            },
            function (argv) { startServer(argv) });

        yargs.demandCommand();
    })
    // Actor commands
    .command('actor', 'Test actor commands', function (yargs) {
        // actor init
        yargs.command(
            'init',
            'Initializes the test actor\'s working directory',
            function (argv) { initActor(argv) });
        // actor start
        yargs.command(
            '* [workdir]',
            'Starts a test actor in the current directory, or in the directory specified',
            function (yargs) {
                yargs.positional('workdir', {
                    describe: 'The working directory to start the server in',
                    type: 'string'
                });
            },
            function (argv) { startActor(argv) });

        yargs.demandCommand();
    })
    .help()
    .alias('h', 'help')
    .version()
    .alias('v', 'version')
    .demandCommand()
    .argv;

function createActorWorkDir(workDir, options) {
    shelljs.mkdir('-p', workDir);
    let sampleConfigFile = path.join(__dirname, findActorDirName(), "actor.yaml");
    const actorConfigFile = path.join(workDir, 'actor.yaml');

    if (fs.existsSync(actorConfigFile)) {
        sampleConfigFile = actorConfigFile;
    } else {
        shelljs.cp(sampleConfigFile, actorConfigFile);
    }

    shelljs.sed(
        '-i',
        /^actorType:.*/,
        'actorType: ' + options.actorType,
        actorConfigFile);

    shelljs.sed(
        '-i',
        /^syncServerUrl:.*/,
        'syncServerUrl: ' + JSON.stringify(options.syncServerUrl),
        actorConfigFile);
}

function createServerWorkDir(workDir, testRepoDir) {
    shelljs.mkdir('-p', workDir);
    let sampleConfigFile = path.join(__dirname, "opentest-server", "server.yaml");
    const serverConfigFile = path.join(workDir, 'server.yaml');

    if (fs.existsSync(serverConfigFile)) {
        sampleConfigFile = serverConfigFile;
    } else {
        shelljs.cp(sampleConfigFile, serverConfigFile);
    }

    shelljs.sed(
        '-i',
        /^testRepoDir:.*/,
        'testRepoDir: ' + JSON.stringify(testRepoDir),
        serverConfigFile);
}

function createTestRepoDir(testRepoDir) {
    var repoExists = true;

    if (!fs.existsSync(testRepoDir)) {
        repoExists = false;
    } else {
        if (fs.readdirSync(testRepoDir).length === 0) {
            repoExists = false;
        }
    }

    if (!repoExists) {
        // Create test repo with same content as the sample repo
        const sampleTestRepoDir = path.join(__dirname, 'sample-repo', '*');
        shelljs.mkdir('-p', testRepoDir);
        shelljs.cp('-r', sampleTestRepoDir, testRepoDir);
    }
}

/** Returns the name of the test actor root directory, without the path. The
 * algorithm is pretty rudimentary - it just returns the first directory in
 * the module's path whose name starts with "opentest-actor". */
function findActorDirName() {
    const files = fs.readdirSync(__dirname);
    for (let file of files) {
        const fileFullPath = path.join(__dirname, file);
        if (file.indexOf('opentest-actor') === 0 && fs.statSync(fileFullPath).isDirectory()) {
            return file;
        }
    }
}

function initActor(argv) {
    let workDir = makeAbsolute(argv.workdir || path.join(process.cwd(), 'actor1'));

    const questions = [{
        type: 'input',
        name: 'workDir',
        message: "Test actor's working directory",
        default: workDir,
        filter: (workDir) => {
            return makeAbsolute(workDir);
        }
    }, {
        type: 'input',
        name: 'actorType',
        message: "Actor type",
        default: 'ACTOR1'
    }, {
        type: 'confirm',
        name: 'customActorConfirmed',
        message: "Are you sure",
        default: false,
        when: (answers) => {
            if (answers.actorType != 'ACTOR1') {
                console.log(chalk.red('  Using an actor type other than ACTOR1 means that you will not be able to run the'));
                console.log(chalk.red('  sample tests (unless you update them accordingly). Are you sure?'));
                return true;
            } else {
                return false;
            }
        }
    }, {
        type: 'input',
        name: 'syncServerUrl',
        message: "Server URL",
        default: 'http://localhost:3000'
    }];

    inquirer.prompt(questions).then(answers => {
        let workDir = makeAbsolute(answers.workDir);
        let actorType = answers.actorType || 'ACTOR1';
        let syncServerUrl = answers.syncServerUrl;

        if (actorType != 'ACTOR1' && !answers.customActorConfirmed) {
            actorType = 'ACTOR1';
        }

        createActorWorkDir(workDir, {
            actorType: actorType,
            syncServerUrl: syncServerUrl
        });

        shelljs.cd(workDir);
        console.log(`\nAll done! Use the commands bellow to start the test actor:\n`);

        console.log(chalk.cyan('cd ' + workDir));
        console.log(chalk.cyan('opentest actor\n'));
    });
}

function initServer(argv) {
    let workDir = makeAbsolute(argv.workdir || path.join(process.cwd(), 'server'));
    let testRepoDir = null;

    const questions = [{
        type: 'input',
        name: 'workDir',
        message: "Server's working directory",
        default: workDir,
        filter: (workDir) => {
            return makeAbsolute(workDir);
        },
        validate: (workDir) => {
            testRepoDir = path.join(
                path.normalize(path.join(workDir, '..')),
                'test-repo');
            return true;
        }
    }, {
        type: 'input',
        name: 'testRepoDir',
        message: "Test repo directory",
        default: () => { return testRepoDir; },
        filter: (testRepoDir) => {
            return makeAbsolute(testRepoDir);
        }
    }];

    inquirer.prompt(questions).then(answers => {
        let workDir = makeAbsolute(answers.workDir);
        let testRepoDir = makeAbsolute(answers.testRepoDir);

        createServerWorkDir(workDir, testRepoDir);
        createTestRepoDir(testRepoDir);

        shelljs.cd(workDir);
        console.log('\nYou are almost ready to run your first test.');
        console.log(`Use the commands bellow to start the OpenTest server:\n`);

        console.log(chalk.cyan('cd ' + workDir));
        console.log(chalk.cyan('opentest server\n'));
    });
}

function makeAbsolute(filePath) {
    filePath = path.normalize(filePath);

    if (path.isAbsolute(filePath)) {
        return filePath;
    } else {
        return path.join(process.cwd(), filePath);
    }
}

function startActor(argv) {
    const workDir = argv.workdir || process.cwd();
    const actorDir = path.join(__dirname, findActorDirName());
    const classPath = path.join(actorDir, '*').replace(/\\/g, '/')

    const newProcess = spawn(
        'java',
        ['-cp', classPath, 'org.getopentest.Main', '--workdir', workDir],
        { stdio: 'inherit' });

    newProcess.on('error', function (err) {
        console.log('ERROR: ' + err.message);
        if (err.code === 'ENOENT') {
            console.log('ERROR: Failed to start Java process. Please ensure that the Java runtime is properly installed.');
        }
    });
}

function startServer(argv) {
    const workDir = argv.workdir || process.cwd();
    const syncServerDir = path.join(__dirname, 'opentest-server');

    const newProcess = spawn(
        'node',
        [path.join(syncServerDir, 'build', 'service.js'), '-- --workdir', workDir],
        { stdio: 'inherit' });

    newProcess.on('error', function (err) {
        console.log('ERROR: ' + err.message);
        if (err.code === 'ENOENT') {
            console.log('ERROR: Failed to start Node.js process. Please ensure that Node.js is properly installed.');
        }
    });
}