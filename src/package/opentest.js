#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const spawn = require('child_process').spawn;
const vm = require('vm');
const yargs = require('yargs');

const currentDir = process.cwd();

yargs
    .command('server', 'OpenTest server commands', function (yargs) {
        yargs.command(
            'init',
            'Initialize OpenTest server\'s working directory',
            function (yargs) { initServer(yargs) });
        yargs.command(
            'start',
            'Start OpenTest server in the current directory, or in the directory specified by the --workdir argument',
            function (yargs) { startServer(yargs) });
    })
    .command('actor', 'Test actor commands', function (yargs) {
        yargs.command(
            'init',
            'Initialize a test actor\'s working directory',
            function (yargs) { initActor(yargs) });
        yargs.command(
            'start',
            'Start a test actor in the current directory, or in the directory specified by the --workdir argument',
            function (yargs) { startActor(yargs) });
    });

yargs.parse();

/** Returns the name of the test actor root directory, without the path. The
 * algorithm is pretty rudimentary - just returns the first directory in the
 * module's path whose name starts with "opentest-actor". */
function findActorDirName() {
    const files = fs.readdirSync(__dirname);
    for (let file of files) {
        const fileFullPath = path.join(__dirname, file);
        if (file.indexOf('opentest-actor') === 0 && fs.statSync(fileFullPath).isDirectory()) {
            return file;
        }
    }
}

function initActor(yargs) {
    const workDir = yargs.argv.workdir || process.cwd();
}

function initServer(yargs) {
    const workDir = yargs.argv.workdir || process.cwd();
}

function startActor(yargs) {
    const workDir = yargs.argv.workdir || process.cwd();
    const actorDir = path.join(__dirname, findActorDirName());
    const classPath = path.join(actorDir, '*').replace(/\\/g, '/')

    const newProcess = spawn(
        'java',
        ['-cp', classPath, 'org.getopentest.Main', '--workdir', workDir],
        { stdio: 'inherit' });

    newProcess.on('error', function (err) {
        console.log('ERROR: ' + err.message);
        if (err.code === 'ENOENT') {
            console.log('ERROR: Failed to start Java process. Please ensure that the Java runtime is properly installed.');
        }
    });
}

function startServer(yargs) {
    const workDir = yargs.argv.workdir || process.cwd();
    const syncServerDir = path.join(__dirname, 'opentest-server');

    const newProcess = spawn(
        'node',
        [path.join(syncServerDir, 'build', 'service.js'), '-- --workdir', workDir],
        { stdio: 'inherit' });

    newProcess.on('error', function (err) {
        console.log('ERROR: ' + err.message);
        if (err.code === 'ENOENT') {
            console.log('ERROR: Failed to start Node.js process. Please ensure that Node.js is properly installed.');
        }
    });
}