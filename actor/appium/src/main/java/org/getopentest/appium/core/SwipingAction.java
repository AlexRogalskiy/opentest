package org.getopentest.appium.core;

import org.getopentest.annotations.TestActionArgument;
import org.getopentest.annotations.Type;
import org.openqa.selenium.By;

@TestActionArgument(name = "swipe", type = Type.STRING, optional = true,
        description = "The direction to swipe towards, in case the element is not visible "
        + "on the screen and we need to be look for it in a scrollable container. "
        + "Valid values are: up, down, left, right and none. Default: none.")
@TestActionArgument(name = "swipeContainer", type = Type.LOCATOR, optional = true,
        description = "")
@TestActionArgument(name = "swipeDurationMs", type = Type.INTEGER, optional = true,
        description = "")
/**
 * Base class for actions that need the ability to swipe towards the specified
 * direction in search of a UI element. The only purpose of this class is to
 * read the swipe-related action arguments and return them when requested in the
 * form of a SwipeOptions object.
 */
public abstract class SwipingAction extends AppiumTestAction {

    private By swipeContainer;

    private String swipeDirection;

    private Integer swipeDurationMs;

    private Double swipeOffsetBottom;

    private Double swipeOffsetLeft;

    private Double swipeOffsetRight;

    private Double swipeOffsetTop;

    /**
     * Returns a SwipeOptions instance, pre-populated with default values and
     * overridden with the values read from the action's swipe-related
     * arguments.
     */
    public SwipeOptions getSwipeOptions() {
        SwipeOptions options = new SwipeOptions();
        options.condition = Condition.VISIBILITY;
        options.direction = this.swipeDirection;
        options.swipeContainer = this.swipeContainer;
        options.durationMs = this.swipeDurationMs;
        options.offsetBottom = this.swipeOffsetBottom;
        options.offsetLeft = this.swipeOffsetLeft;
        options.offsetRight = this.swipeOffsetRight;
        options.offsetTop = this.swipeOffsetTop;

        return options;
    }

    @Override
    public void run() {
        super.run();

        this.swipeDirection = this.readStringArgument("swipe",
                this.readStringArgument("direction", "none"));
        this.swipeContainer = this.readLocatorArgument("swipeContainer",
                this.readLocatorArgument("containerLocator", null));
        this.swipeDurationMs = this.readIntArgument("swipeDurationMs", null);
        Double defaultVerticalOffset = (swipeContainer == null) ? 0.2 : 0.1;
        this.swipeOffsetBottom = this.readDoubleArgument("swipeOffsetBottom", defaultVerticalOffset);
        this.swipeOffsetLeft = this.readDoubleArgument("swipeOffsetLeft", 0.1);
        Double swipeOffsetRight = this.readDoubleArgument("swipeOffsetRight", 0.1);
        Double swipeOffsetTop = this.readDoubleArgument("swipeOffsetTop", defaultVerticalOffset);
    }
}
