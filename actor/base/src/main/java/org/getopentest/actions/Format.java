package org.getopentest.actions;

import java.util.List;
import org.getopentest.base.TestAction;

/**
 * Builds a string, starting from an initial template string and substituting
 * placeholder patterns in the template with a set of format item strings provided
 * separately.
 */
public class Format extends TestAction {

    @Override
    public void run() {
        super.run();

        String template = this.readStringArgument("template");
        List<String> formatItems = this.readArrayArgument("formatItems", String.class);

        this.getActor().injectVariable("$__template", template);
        this.getActor().injectVariable("$__formatItems", this.getActor().toJsType(formatItems));
        
        // Execute the $format function. Since we don't know how many format items 
        // will be passed-in up front, we are first creating an array out of 
        // all arguments and then call the function by using its "apply" method.
        String result = this.getActor().evalScript("$format.apply(null, [].concat($__template, $__formatItems))").toString();
        
        this.getActor().evalScript("delete $__template; delete $__formatItems");

        this.writeOutput("text", this.getActor().toJsType(result));
    }
}
